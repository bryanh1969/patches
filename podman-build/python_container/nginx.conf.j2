events {
    worker_connections 1024;
}

http {
    include    /etc/nginx/mime.types;
    access_log    /var/log/nginx/access.log;
    error_log    /var/log/nginx/error.log;

    log_format custom '
        $remote_addr - $remote_user [$time_local]
        "$request" $status $body_bytes_sent
        "$http_referer" "$http_user_agent"
        Certificate: "$ssl_client_cert"
        Client Key: "$ssl_client_raw_cert"
        ';

    server {
        listen 80;
        listen [::]:80;
        {% if dns_1 or dns_2 or ip_1 or ip_2 %}
        server_name {% if dns_1 %}{{ dns_1 }} {% endif %}{% if dns_2 %}{{ dns_2 }} {% endif %}{% if ip_1 %}{{ ip_1 }} {% endif %}{% if ip_2 %}{{ ip_2 }} {% endif %};
        {% endif %}
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        {% if dns_1 or dns_2 or ip_1 or ip_2 %}
        server_name {% if dns_1 %}{{ dns_1 }} {% endif %}{% if dns_2 and dns_2 != dns_1 %}{{ dns_2 }} {% endif %}{% if ip_1 and ip_1 != dns_1 and ip_1 != dns_2 %}{{ ip_1 }} {% endif %}{% if ip_2 and ip_2 != dns_1 and ip_2 != dns_2 and ip_2 != ip_1 %}{{ ip_2 }} {% endif %};
        {% endif %}

        access_log /var/log/nginx/access.log custom;

        # Client-facing certificate and key
        ssl_certificate "{{ server_cert }}";
        ssl_certificate_key "{{ server_key }}";

        {% if disable_client_cert_auth %}
        {% if disable_client_cert_request %}
        # Disable client certificate request and verification
        ssl_verify_client off;
        {% else %}
        # Request client certificates but skip verification
        ssl_verify_client optional_no_ca;
        ssl_client_certificate "{{ root_cert_path }}";
        {% endif %}
        {% else %}
        # Request client certificates and perform verification
        ssl_verify_client on;
        ssl_client_certificate "{{ root_cert_path }}";
        {% endif %}

        {% if internal_cert and internal_key %}
        # The below code blocks define the behavior for when we hit /api or
        # /. Notice that if internal_cert and internal_key are defined we add
        # the proxy_ssl_certificate directives. This is to account for users
        # being able to provide their own certificates. If the user provides
        # a certificate then that must be presented forward facing but we don't
        # want them to have to provide a certificate for each component of patches.
        # The way we handle this is to use their certificate forward facing and
        # then use our own certificates internally.
        {% endif %}

        location /api {
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header Host $http_host;

            {% if internal_cert and internal_key %}
            proxy_ssl_certificate "{{ internal_cert }}";
            proxy_ssl_certificate_key "{{ internal_key }}";
            proxy_ssl_verify on;
            {% endif %}

            # Set X-SSL-CERT header with client certificate
            proxy_set_header X-SSL-CERT $ssl_client_escaped_cert;
            proxy_pass "https://patches-backend:{{ backend_port }}";
        }

        location / {
            proxy_set_header Host $http_host;

            {% if internal_cert and internal_key %}
            proxy_ssl_certificate "{{ internal_cert }}";
            proxy_ssl_certificate_key "{{ internal_key }}";
            proxy_ssl_verify on;
            {% endif %}

            # Set X-SSL-CERT header with client certificate
            proxy_set_header X-SSL-CERT $ssl_client_escaped_cert;

            proxy_pass http://patches-frontend:{{ frontend_port }};
        }
    }
}
